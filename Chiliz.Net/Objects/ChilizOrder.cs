using System;
using Chiliz.Net.Converters;
using CryptoExchange.Net.Converters;
using Newtonsoft.Json;

namespace Chiliz.Net.Objects
{
    /// <summary>
    /// Information regarding a specific order
    /// </summary>
    public class ChilizOrder
    {
        /// <summary>
        /// The symbol the order is for
        /// </summary>
        [JsonProperty("symbol")]
        public string Symbol { get; set; } = "";

        /// <summary>
        /// The order id generated by Chiliz
        /// </summary>
        [JsonProperty("orderId")]
        public long OrderId { get; set; }

        /// <summary>
        /// The order id as assigned by the client
        /// </summary>
        [JsonProperty("clientOrderId")]
        public string ClientOrderId { get; set; } = "";

        [JsonProperty("exchangeId")]
        public int ExchangeId { get; set; }

        /// <summary>
        /// The price of the order
        /// </summary>
        [JsonProperty("price")]
        public decimal Price { get; set; }

        /// <summary>
        /// The original quantity of the order
        /// </summary>
        [JsonProperty("origQty")]
        public decimal OriginalQuantity { get; set; }

        /// <summary>
        /// The currently executed quantity of the order
        /// </summary>
        [JsonProperty("executedQty")]
        public decimal ExecutedQuantity { get; set; }

        /// <summary>
        /// Cummulative amount
        /// </summary>
        [JsonProperty("cummulativeQuoteQty")]
        public decimal CummulativeQuoteQuantity { get; set; }

        [JsonProperty("avgPrice")]
        public decimal AveragePrice { get; set; }

        /// <summary>
        /// The status of the order
        /// </summary>
        [JsonConverter(typeof(OrderStatusConverter)), JsonProperty("status")]
        public OrderStatus Status { get; set; }

        /// <summary>
        /// How long the order is active
        /// </summary>
        [JsonConverter(typeof(TimeInForceConverter)), JsonProperty("timeInForce")]
        public TimeInForce TimeInForce { get; set; }

        /// <summary>
        /// The type of the order
        /// </summary>
        [JsonConverter(typeof(OrderTypeConverter)), JsonProperty("type")]
        public OrderType Type { get; set; }

        /// <summary>
        /// The side of the order
        /// </summary>
        [JsonConverter(typeof(OrderSideConverter)), JsonProperty("side")]
        public OrderSide Side { get; set; }

        /// <summary>
        /// The stop price
        /// </summary>
        [JsonProperty("stopPrice")]
        public decimal StopPrice { get; set; }

        /// <summary>
        /// The iceberg quantity
        /// </summary>
        [JsonProperty("icebergQty")]
        public decimal IcebergQuantity { get; set; }

        /// <summary>
        /// The time the order was submitted
        /// </summary>
        [JsonConverter(typeof(TimestampConverter)), JsonProperty("time")]
        public DateTime Time { get; set; }

        /// <summary>
        /// The time the order was last updated
        /// </summary>
        [JsonConverter(typeof(TimestampConverter)), JsonProperty("updateTime")]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Is working
        /// </summary>
        [JsonProperty("isWorking")]
        public bool IsWorking { get; set; }
    }
}
